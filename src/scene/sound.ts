export const Sound = {
  context: new window.AudioContext(),
  laser() {
    const base64 =
      "";
    const sound = new Audio("data:audio/mp3;base64," + base64);
    sound.volume = 0.1;
    sound.play();
  },
  hit() {
    // ノイズを生成
    const sampleRate = this.context.sampleRate;
    const hitSound = this.context.createBuffer(1, sampleRate / 10, sampleRate); // 0.1秒のバッファ
    const output = hitSound.getChannelData(0);
    // ホワイトノイズを生成
    for (let i = 0; i < output.length; i++) {
      output[i] = Math.random() * 2 - 1; // -1から1の間のランダムな値
    }
    // ノイズを再生
    const noiseSource = this.context.createBufferSource();
    noiseSource.buffer = hitSound;
    // エンベロープを追加
    const gainNode = this.context.createGain();
    gainNode.gain.setValueAtTime(0.8, this.context.currentTime); // 初期音量
    gainNode.gain.linearRampToValueAtTime(0, this.context.currentTime + 0.1); // 短時間で減衰
    // ノイズソースをゲインに接続
    noiseSource.connect(gainNode);
    gainNode.connect(this.context.destination);
    // 再生
    noiseSource.start();
    noiseSource.stop(this.context.currentTime + 0.1); // 0.1秒間再生
  },
  explosion() {
    // ノイズを生成
    const sampleRate = this.context.sampleRate;
    const noise = this.context.createBuffer(1, sampleRate, sampleRate);
    const output = noise.getChannelData(0);
    // ホワイトノイズを生成
    for (let i = 0; i < output.length; i++) {
      output[i] = Math.random() * 2 - 1;
    }
    // ノイズを再生
    const noiseSource = this.context.createBufferSource();
    noiseSource.buffer = noise;
    // 音をフィルタリングして爆発音のように加工
    const filter = this.context.createBiquadFilter();
    filter.type = "bandpass";
    filter.frequency.setValueAtTime(800, this.context.currentTime); // 中音域を強調
    filter.Q.setValueAtTime(5, this.context.currentTime); // Q値を調整
    // エンベロープを追加
    const gainNode = this.context.createGain();
    gainNode.gain.setValueAtTime(0.8, this.context.currentTime); // 初期音量
    gainNode.gain.linearRampToValueAtTime(0.1, this.context.currentTime + 0.2); // 減衰
    // リバーブを追加
    const convolver = this.context.createConvolver();
    // リバーブのインパルス応答を生成
    const reverbBuffer = this.context.createBuffer(
      2,
      sampleRate * 2,
      sampleRate,
    );
    const leftChannel = reverbBuffer.getChannelData(0);
    const rightChannel = reverbBuffer.getChannelData(1);
    for (let i = 0; i < leftChannel.length; i++) {
      leftChannel[i] = (Math.random() * 2 - 1) * (1 - i / leftChannel.length);
      rightChannel[i] = (Math.random() * 2 - 1) * (1 - i / rightChannel.length);
    }
    convolver.buffer = reverbBuffer;

    // ノイズソースをフィルタ、ゲイン、リバーブに接続
    noiseSource.connect(filter);
    filter.connect(gainNode);
    gainNode.connect(convolver);
    convolver.connect(this.context.destination);

    // 再生
    noiseSource.start();
    noiseSource.stop(this.context.currentTime + 0.5); // 0.5秒間再生
  },
};
